1.1. The browser is running HTTP version 1.1. In the GET packet you can see the full request is ended by "HTTP/1.1\r\n" which means it's running version 1.1.

Likewise, the returned packet starts with "HTTP/1.1" which means the server is running version 1.1.

1.2. American english. In the GET-packet, the Accept-Language field contains en-US, en;q=0.5\r\n, where the en-US means American english.

There is information about the browser used, the users operating system, which type of text the browser wants in return, and which compression format is acceptable.

1.3. The IP-address of this computer is 10.241.35.234. The server's IP-address is 128.119.245.12. This information is visible in the source- and destination field of the packet. 

We verified the IPs by pinging both and checking the latency. The latency was less than 1ms for our computer, and ~120ms for the server.

1.4. Status code 304, which stands for "NOT MODIFIED". This is because we had visited the page a bit earlier. If you do a hard refresh (ctrl + F5), your cache refreshed and you get the "original" packet.

1.5. File was changed: wed, 17 Jan 2018 06:59:01 GMT

1.6. 554 bytes, which can be seen in the first status line of the received packet; Frame 141: 554 bytes...

1.7. No, we did not. The html code that was not displayed under the header "Hypertext Transfer Protocol", was displayed under the header "Line-based text data: text/html"




2.8. No we do not see that.

2.9. It returned the entire HTMl file. It is visible in the "Line-based text data: text/html" header.

2.10. Yes, the information is: Fri, 19 Jan 2018 06:59:01 GMT. This date is when i last got the entire file from the server.

2.11. Status code 304, "Not Modified". The server did not return the full file. It simply checked if we had the latest version based on the "IF-MODIFIED-SINCE" field in the GET-request, and then did not return the file saying "Not Modified" meaning we had the latest version.

2.Task B.
The IF-MODIFIED-SINCE field seems to be for optimizing Browser<->Webserver communications. Instead of wasting time sending a file that the browser already has, the browser keeps track of the date it recieved the file in the cache. It then includes that point in time to have the webserver easily check if the file is recent or not.

If the file is recent the status code 304 is returned, and the file is not included in the packet. Otherwise, the OK code 200 is included along with the file.




3.12. There was one GET request for the HTML-page, and another one for some /favicon.ico file on their servers. The file doesn't seem to exist however as it returned a 404 status message.

3.13. Four.

3.14. "200" "OK" as we didn't have the file from earlier.

3.15. Yes. If you read the raw data under the "TCP payload" header, you can spot HTTP header information as well as a bunch of HTML source code. TCP does not seem to care as to what data it carries. Only at arrival HTTP decides what to with the recieved data.

3.Task C
If the file size is too large to be carried by a single TCP packet, TCP splits the file up into chunks and sends them. Upon arrival, TCP reassembles the chunks and passes them on to the protocol that asked for the file (In this case HTTP).
TCP does not seem to care for what data it carries, it simply delivers what it was asked for, and lets the next protocol decide what to do.

This structure is great as it is very modularized. If you were to make your own application-layer protocol (some equivalent to HTTP), you can just as easily use TCP for your file transfers as HTTP, as TCP can carry arbitrary data. I suppose this is the main point of having the OSI-model the way it is.




4.16 Four.
The first GET request was for the HTML-page, second for a "person.png" and third for a "cover_5th_ed.jpg". The third GET returns an HTML-page with information that "cover_5th_ed.jpg" has been moved to, which is the reason for the fourth GET request, this request was sent to the server to have it get the image from the other source.

4.17 In this instance the two images were downloaded serially. This can be seen in the packet list panel, in the time stamps. As by the time the the GET request for the second image was sent, had the first image already been downloaded.

4.Task D
Why there are more then one get request is because when the browser recieves the HTML-page, and sees that there are images present, it has to send for the image data in more GET-requests.

The current drawback with this method is that the client has to request the server for the information when it sees that there are pieces missing. This is supposed to get solved in html 2.0, by that the server knows what information the page needs. Then when a client requests the page, the server automatically includes the other pieces.




5.18 401 Unauthorized

5.19 "Authorization:"

5."Task X"
Firstly a GET-request is sent for the page. The server returns unauthorized. The browser prompts the user for possible authentication information. A new get request is sent but with authentication attached. If the given username and pasword are valid, a page is returned, otherwise an error page is returned.

After one valid entry, the user can enter the site automatically(probably depending on the browser), as the browser automatically includes credentials in the new GET-request.

6.20 Connection: keep-alive implies that after the first connection request, the server keeps the established channel open for a certain time. This to ease transfer of future files, for example if an HTML page contains pictures.

Connection: close is the opposite of this, where as after each file transfer the established channel is closed. And a new one has to be established for future file transfers.

As far as we've found, the keep-alive connection is the "best" one. The reasons for this being:
"Creating new TCP connections can take a lot of resources such as CPU and memory usage. Keeping connections alive longer can reduce this usage".
And "The ability to serve multiple files using the same connection can reduce latency and allow web pages to load faster".

The one benefit a "close" connection has is that because every channel closes directly after transfer, a new connection(from another user) can open.

Doing this in the long run could, though very improbable, enable more users to get their data "faster", as opened channels do not have a "time-out" time, allowing new users to connect faster. But as stated, this is probably not the case unless the server has several minutes of time-out.

6.Task E
See above text (6.20):
